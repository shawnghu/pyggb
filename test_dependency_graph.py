import classical_generator as cg
import pprint

# Generate a construction
generator = cg.ClassicalGenerator(seed=42)
generator.generate_construction(num_commands=100)

# Print the construction
print('Generated Construction:')
for cmd in generator.command_sequence:
    print(cmd)

# Examine the dependency graph
print('\nDependency Graph:')
for identifier, node in generator.dependency_graph.nodes.items():
    if node.parents:
        parent_ids = [p.identifier for p in node.parents]
        print(f'{identifier} (generated by "{node.command}") depends on: {parent_ids}')
    else:
        print(f'{identifier} (generated by "{node.command}") has no dependencies')

# Analyze ancestry of the final measurement
measure_id = generator.command_sequence[-1].split("->")[-1].strip()

# Find the node with the highest ancestor count
print("\nNode with the highest number of ancestors:")
max_ancestors = 0
max_node_id = None

for identifier in generator.dependency_graph.nodes:
    ancestors = generator.dependency_graph.get_ancestors(identifier)
    ancestor_count = len(ancestors)
    
    if ancestor_count > max_ancestors:
        max_ancestors = ancestor_count
        max_node_id = identifier

print(f"Node {max_node_id} has {max_ancestors} ancestors")

# Define the function to print the dependency tree
def print_node_tree(node_id, depth=0):
    node = generator.dependency_graph.nodes.get(node_id)
    if not node:
        return
    indent = "  " * depth
    print(f"{indent}{node_id}: {node.command}")
    for parent in node.parents:
        print_node_tree(parent.identifier, depth + 1)

# Print the complete dependency chain for the node with the most ancestors
print("\nComplete dependency chain for node with most ancestors:")



'''
# Print the complete dependency chain for the final measurement
print("\nComplete dependency chain:")
def print_node_tree(node_id, depth=0):
    node = generator.dependency_graph.nodes.get(node_id)
    if not node:
        return
    indent = "  " * depth
    print(f"{indent}{node_id}: {node.command}")
    for parent in node.parents:
        print_node_tree(parent.identifier, depth + 1)
'''
print_node_tree(max_node_id) 